class Solution {
    // Function to convert an infix expression to a postfix expression.
    public static String infixToPostfix(String exp) {
        // Your code here
        Stack<String> postfix = new Stack<>();
        Stack<Character> optr = new Stack<>();
        for(int i = 0 ; i < exp.length() ;i++){
            char c = exp.charAt(i);
            if(c == '('){
                optr.push(c);
            }else if( (c >='0' && c <= '9')  || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')){
                postfix.push(c+"");
            }else if(c == ')'){
                while(optr.size() > 0 && optr.peek() != '(')
                {
                    char op = optr.pop();

                    String postval2 = postfix.pop();
                    String postval1 = postfix.pop();
                    postfix.push(postval1 + postval2 + op);
                }
                if(optr.size() > 0)
                    optr.pop();
            }else if(c == '+' || c == '-' || c == '*' || c == '/' || c == '^'){
                while (optr.size() > 0 && optr.peek() != '(' && precedence(c) <= precedence(optr.peek())){
                    char op = optr.pop();

                    String postval2 = postfix.pop();
                    String postval1 = postfix.pop();
                    postfix.push(postval1 + postval2 + op);
                }
                optr.push(c);
            }
            
            
        }
        while(optr.size() > 0){
            char op = optr.pop();
            String postval2 = postfix.pop();
            String postval1 = postfix.pop();
            postfix.push(postval1 + postval2 + op);
            }
        return postfix.pop();
    }
    public static int precedence(char c){
        if(c == '+' || c == '-')
            return 1;
        else if(c == '*' || c == '/')
            return 2;
        else 
            return 3;
    }
